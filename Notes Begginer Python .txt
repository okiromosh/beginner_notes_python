    IF STATMENTS
 price = 1000000
good_credit = False
if good_credit:
    downpayment = price * 0.1
else:
    downpayment = price * 0.2

print(f"Down Payment Of: ${downpayment}")

        AND CONDITION
has_high_income = True
has_good_credit = False
if has_high_income and has_good_credit:
    print("Eligible for Loan")
else:
    print("Not Eligible for Loan")

            OR CONDITION
has_high_income = False
has_good_credit = True
if has_high_income or has_good_credit:
    print("Eligible for Loan")
else:
    print("Not Eligible for Loan")

            AND NOT CONDITION

has_high_income = False
has_good_credit = True
if has_high_income or has_good_credit:
    print("Eligible for Loan")
else:
    print("Not Eligible for Loan")

------------------------------------------------------------------------------------

            COMPARISON OPERATORS

name = input("Write Your name")

if len(name) <3:
    print("Name too Short")             #FINDING LENGTH OF NAME AND COMPARING
elif len(name) >20:
    print("Name too Long")
else:
    print(f"Your name is {name}")

----------------------------------------------------------------------------------------

weight = int(input("Input Your Weight"))
weight_in = input ("(L)bs (K)gs")

if weight_in.upper() == "L":                    #CONVERTING BETWEEN KILOS AND POUNDS
    converted = weight * 0.45
    print(f"You are {converted} kilos")
else:
    converted = weight // 0.45
    print(f"You are {converted} pounds")

------------------------------------------------------------------------------------------
        WHILE CONDITIONS

i = 1
while i <= 10:
    print(i)
    i = i + 1
print("Done")
--------------------
i = 1
while i <= 10:
    print('*' * i)
    i = i + 1
print("Done")

---------------------------------------------------------------------------------------------
                    GUESSING GAME
secret_number = 7
guess_count = 0
guess_limit = 3

while guess_count < guess_limit:
    guess = int(input("Guess: "))
    guess_count += 1
    if guess == secret_number:
         print("You  Guess Right")
         break
else:
    print("Sorry You Guessed Wrong")

-------------------------------------------------------------------------------------------------
            START STOP CAR PROGRAM
command = ""
started = False
while True:
    command = input("> ").lower()
    if command == "start":
        if started:
            print("Car already Started")
        else:
            started = True
            print("Car Started")

    elif command =="stop":
        if not started:
            print("Car is Already Stopped")
        else:
            started = False
            print("Car Stopped")
    elif command == "help":
        print("""
start - to start car
stop - to stop the car
quit - to quit
        """)
    elif command == "quit":
        break
    else:
        print("Sorry, Try Again")

------------------------------------------------------------------------------------------------
                FOR LOOPS
prices = [10, 20, 30, 40]
total = 0
for price in prices:
    print(price)                        #finds each item in prices
    total += price                      #adds each item to the next item
    print(f"{Total:}")                  # shows each total after each item
print(f"Total: {total}")                # show overall total outside the loop

-------------------------------------------------------------------------------------------------
                INNER LOOPS
numbers = [5, 2, 5, 2, 2]
for number in numbers:
    output = ''                     #once it gets first number(5), it goes into the inner loop
    for count in range(number):
        output += 'x'               #output becomes x to the number got in first loop
    print(output)                   # prints results for inner loop. Then the first loop is repeated to get second item(2)

--------------------------------------------------------------------------------------------------
            LISTS
numbers = [3, 5, 1, 3, 5, 2, 9, 11, 20]             # To find the largest number in a list
max_number = numbers[0]                             # Assume the first number index[0] is largest
for number in numbers:                              # For each index return
    if number > max_number:                         # If assumption is wrong
        max_number = number                         # max_number becomes variable number result and continues looping
print(max_number)                                   # Print new largest number outside the loop
------------------------------------------
            2D LISTS
        [1, 2, 3], # This row is index[0]
        [4, 5, 6],  # This row is index[1]
        [7, 8, 9]   #This row is index[2]

Column  [0][1][2]
------------------------------------------
matrix = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]
for row in matrix:          # Defines each row
    print(row)              # shows contents of each row
    for item in row:        # Defines each item(number) in the row
        print(item)         # Shows individual items(numbers) from the row

-------------------------------------------------------------------------------------------------
            LIST FUNCTIONS
numbers = [4, 2, 1, 8, 9, 6]
numbers.append(20)              # Adds an item to the list
print(numbers)                  # Prints new list(numbers) with the added item(20)
------------------------------------------
numbers = [4, 2, 1, 8, 9, 6]
numbers.insert(0, 12)            # Inserts an item in a specific index  (index, new_item)
print(numbers)
--------------------------------------------
            Remove duplicates
numbers = [4, 2, 4, 1, 8, 1, 9, 6, 9]
print(numbers)
new_list = []
for number in  numbers:                 # Pulls each individual number one by one for this loop
    if number not in new_list:          # if that number is not in new_list
        new_list.append(number)         # add that number into the new_list
print(new_list)                         # Print outside loop

-----------------------------------------------------------------------------------------------
            TUPLES
Lists that are immutable , unchangable. These are created using ()
Example
        list = (1, 2, 3, 4)     # This cannot be appended, added, removed

------------------------------------------------------------------------------------------------
                    UNPACKING
Assigns values based on another lists index
Example
        coordinates = (1, 2, 3)
        x, y, z = coordinates       /x is assigned 1 which is index[0]/ /y is assigned 2 which is index[1]/
                                    /z is assigned 3 which is index[2]
--------------------------------------------------------------------------------------------------
                    DICTIONARY
    Key value pair information
Example
    Name:   john smith
    Email:  john@mail.com
    Phone:  123456
    |KEY|   |VALUE|
-------------------------------------------
customer ={
    "name": "John Smith",
    "age": "20",                        # Defines dictionary
    "is_verified": True
}
customer["name"] = "Jack Smith"        # Updates a value in the key
customer["birthdate"] = "Jan 1 2000"    # Creates a new key and assigns a value
print(customer["birthdate"])
print(customer["name"])                 # Outputs the values created
print(customer.get("age"))              # Outputs values but won't bring an error if there's no key mentioned
---------------------------------------------
            CONVERT DIGITS TO WORD
phone = input("Phone: ")                                    # Asks for your number
digits_name = {
    "1": "One",
    "2": "Two",                                             # You assign a name to each number
    "3": "Three",
    "4": "Four"
}
output = ""                                                # This will be the result variable
for ch in phone:                                             # For each number(ch) given in input(phone)
    output += digits_name.get(ch, "!") + " "                 # The new result will be (ch) assigned to value from digits_name
print(output)
------------------------------------------------
phone = input("Phone: ")
digits_name = {
    "1": "I",
    "2": "II",
    "3": "III",
    "4": "IV"
}
output = ""
for ch in phone:
    output += digits_name.get(ch, "!") + " "
print(output)
--------------------------------------------------
message = input(">")
words = message.split(' ')
emojis = {
    ":)": "ðŸ˜Š",
    ":(": "â˜¹",
    ";)": "ðŸ˜œ"
}
output = ""
for word in words:
    output += emojis.get(word, word) +' '
print(output)
-------------------------------------------------------
                        EXCEPTIONS
try:
    age = int(input("Age: "))
    income = 20000
    risk = income / age
    print(age)
    print(f"Risk is: {risk}")
except ZeroDivisionError:               # Handles situations where input is 0
    print("Age cannot be 0!")
except ValueError:                      # Handles situations where input is not the specified value (int)
    print("Invalid Entry")
-----------------------------------------------------------------------------------------------------
                    CLASS
class Cars:                         # Defines overall class ie This is about cars
    def color(self):
        print("Color")
    def year(self):
        print("year")


toyota = Cars                       # Defines variable in class ie car models
toyota.color = "blue"
print(toyota.color)

mercedes = Cars
mercedes.year = 2012
print(mercedes.year)
------------------------------------------------------------------------------------------
                            CONSTRUCTORS
class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    def draw(self):
        print("draw")
    def move(self):
        print("move")


point  = Point(10, 20)
print(point.y)



------------------------------------------------------------------------------------------
                                FUNCTIONS

def greet_user():                       # def is used to Define and create a function
    print("Hello")
    print("How are you doing")


print("Start")
greet_user()                            # calls the function and executes the commands inside
print("Finish")
---------------------------------------------------------------------------------------------
                                PARAMETERS
def greet_user(name):                   #(name) creates parameter name in the function which can be added to the function
    print(f"Hi {name}!")
    print("How are you doing")


print(">Start<")
greet_user("John")                      # when calling the function, we add the name
print(">Finish<")
-------------------------------------
                    Multiple Parameters
def greet_user(first_name, last_name):
    print(f"Hi {first_name} {last_name}")
    print("How are you doing")


print(">Start<")
greet_user("John", "Smith")
print(">Finish<")
---------------------------------------------------------
                            KEYWORD ARGUMENTS
def greet_user(first_name, last_name):
    print(f"Hi {first_name} {last_name}")
    print("How are you doing")


print(">Start<")
greet_user(last_name="Smith", first_name="John")        #You define the keywords regardless of position
calc_cost(total=50, shipping=5, discount=0.1)           # Most useful for defining numerical values
print(">Finish<")

------------------------------------------------------------
                    RETURN STATEMENTS
def square(number):
    return number * number


print(square(3))
-------------------------------------------------------------
                    REUSABLE RETURN
class Person:
    def __init__(self, name):
        self.name = name
    def talk(self):
        print(f"Hi am {self.name}")


john = Person("John Smith")
john.talk()

bob = Person("Bob Brown")
bob.talk()
-----------------------------------------------------------------
                        INHERITANCE

class Mammal:
    def run(self):
        print("Run")
    def walk(self):                         # This class will be inherited by other classes
        print("walk")


class Dog(Mammal):
                                # Add method specific to Dog eg bark
    pass                        # OR write pass


class Cat(Mammal):
    def meow(self):
        print("Meow")


dog1 = Dog()
dog1.walk()

cat1 = Cat()
cat1.meow()
--------------------------------------------------------------------------------------
                            MODULES
    # Create new file converters.py that becomes our module
   def lbs_to_kgs(weight):
    return weight * 0.45

def kgs_to_lbs(weight):
    return weight / 0.45


# In app.py

----------------------------------------------------------------------------------------
# Create module utils in new file utils.py
def find_max(numbers):
    maximum = numbers[0]
    for number in numbers:
        if number > maximum:
            maximum = number
    return maximum

###### In app.py #######
from utils import find_max

numbers = [10, 3, 6, 2]
maximum = find_max(numbers)
print(maximum)
--------------------------------------------------------------------------------------
                    PACKAGES
        A Package is a container for multiple modules
Project > New > Python Package
Python Package > New > File # Create module eg shipping

        ##### In app.py #####
import ecommerce.shipping
ecommerce.shipping.calc_shipping()

## OR ##
     |package| |module|        |function|
from ecommerce.shipping import calc_shipping    # Calls a specific function in module

calc_shipping()
calc_shipping()

##  OR ##
     |package|        |module|
from ecommerce import shipping                 # Imports specific module from the package
shipping.calc_shipping()
-----------------------------------------------------------------------------------------------
                    GENERATING RANDOM VALUES
import random


class Dice:
    def roll(self):
        dice1 = random.randint(1, 7)
        dice2 = random.randint(1, 7)
        return dice1, dice2


turn = Dice()
print(turn.roll())
------------------------------------------------------------------------
                    PATHS AND DIRECTORIES
from pathlib import Path

# Abosulte path
# c:\Program Files\Microsoft
# /use/local/bin
# Relative path

path = Path("email")
#print(path.exists())
#path.mkdir()            # Make directory email
path.rmdir()               # Deletes directory
------------------------------------------------
from pathlib import Path

path = Path()

for file in path.glob('*'):
    print(file)

-----------------------------------------------------------------------------------
                PYPI AND PIP
pypi - python package index
        contains third party module
pip  - Command for installing packages
        pip install <package_name> in terminal
        pip install openpyxl